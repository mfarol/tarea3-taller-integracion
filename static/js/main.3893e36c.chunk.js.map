{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","socketStatus","document","getElementById","closeBtn","socket","io","path","onclose","event","innerHTML","onopen","currentTarget","url","columns","Header","accessor","columns2","acc_his","acciones","emit","on","accion","i","length","diccc","ticker","value","change","highest","lowest","volume","name","company_name","push","dicc3","mercados2","once","mercado","key","dicc2","buy","sell","total","quantity","listed_companies","participation","final","lista","App","useState","setData","data2","setData2","stocks","setStocks","colu","exchange","setExchange","colu2","useEffect","newInfo","currentData","data_his","tiempo","Date","time","toLocaleString","console","log","mercados","j","includes","onclick","e","preventDefault","close","className","text-align","id","map","h","k","Math","random","width","height","data","dataKey","label","position","angle","stroke","strokeDasharray","type","activeDot","r","isAnimationActive","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3893e36c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport io from 'socket.io-client';\nimport ReactDOM from 'react-dom';\nimport { useEffect, useState } from 'react';\nimport {\n  CartesianGrid,\n  BarChart,\n  Bar,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip\n} from 'recharts';\n\nvar socketStatus = document.getElementById('status');\nvar closeBtn = document.getElementById('close');\n\nvar socket = io('wss://le-18262636.bitzonte.com', {\n    path: '/stocks'\n  });\n\nsocket.onclose = function(event) {\n    socketStatus.innerHTML = 'Desconectado de WebSocket.';\n};\n\nsocket.onopen = function(event) {\n    socketStatus.innerHTML = 'Connected to: ' + event.currentTarget.url;\n};\n\nconst columns = [{\n    Header: 'Nombre',\n    accessor: 'ticker'\n}, {\n    Header: 'Ultimo Precio',\n    accessor: 'value'\n}, {\n    Header: 'Variacion Porcentual',\n    accessor: 'change'\n}, {\n    Header: 'Alto Historico',\n    accessor: 'highest'\n}, {\n    Header: 'Bajo Historico',\n    accessor: 'lowest'\n}, {\n    Header: 'Volumen Total Transado',\n    accessor: 'volume'\n}];\n\nconst columns2 = ['Nombre', 'Volumen Compra', 'Volumen Venta', 'Volumen Total', 'Cantidad Acciones', 'Participacion de Mercado'];\n\nvar acc_his = [];\nvar acciones = [];\nsocket.emit('STOCKS', /* */);\nsocket.on('STOCKS', accion => {\n    for (var i = 0; i < accion.length; i++) {\n        var diccc = {ticker: accion[i].ticker, value: 0, change: 0, highest: 0, lowest: 1000000, volume: 0, name: accion[i].company_name};\n        acciones.push(diccc);\n        var dicc3 = {ticker: accion[i].ticker, value: []};\n        acc_his.push(dicc3);\n    }\n});\n\nvar mercados2 = [];\nsocket.emit('EXCHANGES', /* */);\nsocket.once('EXCHANGES', mercado => {\n    for (var key in mercado) {\n        var dicc2 = {name: mercado[key].name, buy: 0, sell: 0, total: 0, quantity: mercado[key].listed_companies.length, participation: 50, final: 0, lista: mercado[key].listed_companies};\n        mercados2.push(dicc2);\n    }\n});\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n    const [data2, setData2] = useState(acc_his);\n    const [stocks, setStocks] = useState(acciones);\n    const [colu, setColu] = useState(columns);\n    const [exchange, setExchange] = useState(mercados2);\n    const [colu2, setColu2] = useState(columns2);\n\n    // 1. listen for a cpu event and update the state\n    useEffect(() => {\n        socket.on('UPDATE', newInfo => {\n            setData(currentData => [...currentData, newInfo]);\n            var data_his = data2;\n            for (var i = 0; i < data_his.length; i++) {\n                if (data_his[i].ticker == newInfo.ticker) {\n                    var tiempo = new Date(newInfo.time).toLocaleString(\"es-CL\");\n                    data_his[i].value.push({value: newInfo.value, time: tiempo});\n                }\n            }\n            setData2(data_his);\n            var acciones = stocks;\n            for (var i = 0; i < acciones.length; i++) {\n                if (newInfo.ticker == acciones[i].ticker) {\n                    acciones[i].change = ((acciones[i].value / newInfo.value) - 1) * 100;\n                    acciones[i].value = newInfo.value;\n                    if (newInfo.value > acciones[i].highest) {\n                        acciones[i].highest = newInfo.value;\n                    }\n                    if (newInfo.value < acciones[i].lowest) {\n                        acciones[i].lowest = newInfo.value;\n                    }\n                }\n            }\n            setStocks(acciones);\n            console.log(acciones);\n        });\n        socket.on('BUY', newInfo => {\n            var acciones = stocks;\n            var mercados = exchange;\n            for (var i = 0; i < acciones.length; i++) {\n                if (newInfo.ticker == acciones[i].ticker) {\n                    acciones[i].volume += newInfo.volume;\n                    for (var j = 0; j < mercados.length; j++) {\n                        var boolee = mercados[j].lista.includes(acciones[i].name);\n                        if (boolee) {\n                            mercados[j].buy += newInfo.volume;\n                            mercados[j].total += newInfo.volume;\n                        }\n                        mercados[j].final += newInfo.volume;\n                        mercados[j].participation = (mercados[j].total / mercados[j].final) * 100;\n                    }\n                }\n            }\n            setStocks(acciones);\n            setExchange(mercados);\n        });\n        socket.on('SELL', newInfo => {\n            var acciones = stocks;\n            var mercados = exchange;\n            for (var i = 0; i < acciones.length; i++) {\n                if (newInfo.ticker == acciones[i].ticker) {\n                    acciones[i].volume += newInfo.volume;\n                    for (var j = 0; j < mercados.length; j++) {\n                        var boolee = mercados[j].lista.includes(acciones[i].name);\n                        if (boolee) {\n                            mercados[j].sell += newInfo.volume;\n                            mercados[j].total += newInfo.volume;\n                        }\n                        mercados[j].final += newInfo.volume;\n                        mercados[j].participation = (mercados[j].total / mercados[j].final) * 100;\n                    }\n                }\n            }\n            setStocks(acciones);\n            setExchange(mercados);\n        });\n    }, []);\n\n    closeBtn.onclick = function(e) {\n        e.preventDefault();\n    \n        // Close the WebSocket.\n        socket.close();\n    \n        return false;\n    };\n\n  return (\n    <div className=\"App\">\n      \n     <div>\n        <h1 text-align=\"center\" >Acciones</h1>\n\n        <h2>Mercados de Valores</h2>\n\n        <table id=\"exchange\">\n            <thead>\n            <tr>{colu2.map((h, i) => <th key={i}>{h}</th>)}</tr>\n            </thead>\n            <tbody>\n            {exchange.map((k, i) => {\n                return (\n                <tr key={i}>\n                    <td>{k.name}</td>\n                    <td>{k.buy}</td>\n                    <td>{k.sell}</td>\n                    <td>{k.total}</td>\n                    <td>{k.quantity}</td>\n                    <td>{k.participation}</td>\n                </tr>\n                );\n            })}\n            </tbody>\n        </table>\n\n        <br></br>\n        \n        <h2>Acciones</h2>\n        \n        <table id=\"stocks\">\n            <thead>\n            <tr>{colu.map((h, i) => <th key={i}>{h.Header}</th>)}</tr>\n            </thead>\n            <tbody>\n            {stocks.map((k, i) => {\n                return (\n                <tr key={i}>\n                    <td>{k.ticker}</td>\n                    <td>{k.value}</td>\n                    <td>{k.change}</td>\n                    <td>{k.highest}</td>\n                    <td>{k.lowest}</td>\n                    <td>{k.volume}</td>\n                </tr>\n                );\n            })}\n            </tbody>\n        </table>\n        \n        \n        {data2.map((accion) => {\n            return(\n                <div>\n                <h2>{accion.ticker}</h2>\n                <LineChart key={Math.random()} width={500} height={300} data={accion.value} >\n                    <XAxis dataKey=\"time\" />\n                    <YAxis label={{ value: \"Precio\", position: \"insideLeft\", angle: -90 }} />\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\n                    <Line dataKey=\"value\" type=\"monotone\" stroke=\"#82ca9d\" activeDot={{ r: 8 }} isAnimationActive={false} />\n                    <Tooltip />\n                </LineChart>\n                </div>\n            );\n        })}\n        \n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}